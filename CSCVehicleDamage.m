/*
	CSCVehicleDamage.h
	The implementation of properties and methods for the CSCVehicleDamage object.
	Generated by SudzC.com
*/
#import "CSCVehicleDamage.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCInsuranceCertificate.h"
#import "CSCArrayOfString.h"
#import "CSCArrayOfString.h"
#import "CSCArrayOfString.h"
#import "CSCVehicleUsage.h"
#import "CSCDriver.h"
#import "CSCVehicleUsage.h"
#import "CSCPerson.h"
#import "CSCArrayOfString.h"
#import "CSCArrayOfString.h"
@implementation CSCVehicleDamage
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize Certificate = _Certificate;
	@synthesize CircumstanceLabelList = _CircumstanceLabelList;
	@synthesize CircumstanceList = _CircumstanceList;
	@synthesize DamageList = _DamageList;
	@synthesize DeclaredUsage = _DeclaredUsage;
	@synthesize Driver = _Driver;
	@synthesize EffectiveUsage = _EffectiveUsage;
	@synthesize IdentifiedDriver = _IdentifiedDriver;
	@synthesize ImpactPoint = _ImpactPoint;
	@synthesize Owner = _Owner;
	@synthesize Remark = _Remark;
	@synthesize VisibleDamageList = _VisibleDamageList;

	- (id) init
	{
		if(self = [super init])
		{
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.Certificate = nil; // [[CSCInsuranceCertificate alloc] init];
			self.CircumstanceLabelList = [[NSMutableArray alloc] init];
			self.CircumstanceList = [[NSMutableArray alloc] init];
			self.DamageList = [[NSMutableArray alloc] init];
			self.DeclaredUsage = nil; // [[CSCVehicleUsage alloc] init];
			self.Driver = nil; // [[CSCDriver alloc] init];
			self.EffectiveUsage = nil; // [[CSCVehicleUsage alloc] init];
			self.ImpactPoint = nil;
			self.Owner = nil; // [[CSCPerson alloc] init];
			self.Remark = [[NSMutableArray alloc] init];
			self.VisibleDamageList = [[NSMutableArray alloc] init];

		}
		return self;
	}

	+ (CSCVehicleDamage*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCVehicleDamage*)[[CSCVehicleDamage alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.Certificate = [[CSCInsuranceCertificate createWithNode: [Soap getNode: node withName: @"Certificate"]] object];
			self.CircumstanceLabelList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"CircumstanceLabelList"]] object];
			self.CircumstanceList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"CircumstanceList"]] object];
			self.DamageList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"DamageList"]] object];
			self.DeclaredUsage = [[CSCVehicleUsage createWithNode: [Soap getNode: node withName: @"DeclaredUsage"]] object];
			self.Driver = [[CSCDriver createWithNode: [Soap getNode: node withName: @"Driver"]] object];
			self.EffectiveUsage = [[CSCVehicleUsage createWithNode: [Soap getNode: node withName: @"EffectiveUsage"]] object];
			self.IdentifiedDriver = [[Soap getNodeValue: node withName: @"IdentifiedDriver"] boolValue];
			self.ImpactPoint = [Soap getNodeValue: node withName: @"ImpactPoint"];
			self.Owner = [[CSCPerson createWithNode: [Soap getNode: node withName: @"Owner"]] object];
			self.Remark = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"Remark"]] object];
			self.VisibleDamageList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"VisibleDamageList"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"VehicleDamage"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.Certificate != nil) [s appendString: [self.Certificate serialize: @"Certificate"]];
		if (self.CircumstanceLabelList != nil && self.CircumstanceLabelList.count > 0) {
			[s appendFormat: @"<CircumstanceLabelList>%@</CircumstanceLabelList>", [CSCArrayOfString serialize: self.CircumstanceLabelList]];
		} else {
			[s appendString: @"<CircumstanceLabelList/>"];
		}
		if (self.CircumstanceList != nil && self.CircumstanceList.count > 0) {
			[s appendFormat: @"<CircumstanceList>%@</CircumstanceList>", [CSCArrayOfString serialize: self.CircumstanceList]];
		} else {
			[s appendString: @"<CircumstanceList/>"];
		}
		if (self.DamageList != nil && self.DamageList.count > 0) {
			[s appendFormat: @"<DamageList>%@</DamageList>", [CSCArrayOfString serialize: self.DamageList]];
		} else {
			[s appendString: @"<DamageList/>"];
		}
		if (self.DeclaredUsage != nil) [s appendString: [self.DeclaredUsage serialize: @"DeclaredUsage"]];
		if (self.Driver != nil) [s appendString: [self.Driver serialize: @"Driver"]];
		if (self.EffectiveUsage != nil) [s appendString: [self.EffectiveUsage serialize: @"EffectiveUsage"]];
		[s appendFormat: @"<IdentifiedDriver>%@</IdentifiedDriver>", (self.IdentifiedDriver)?@"true":@"false"];
		if (self.ImpactPoint != nil) [s appendFormat: @"<ImpactPoint>%@</ImpactPoint>", [[self.ImpactPoint stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Owner != nil) [s appendString: [self.Owner serialize: @"Owner"]];
		if (self.Remark != nil && self.Remark.count > 0) {
			[s appendFormat: @"<Remark>%@</Remark>", [CSCArrayOfString serialize: self.Remark]];
		} else {
			[s appendString: @"<Remark/>"];
		}
		if (self.VisibleDamageList != nil && self.VisibleDamageList.count > 0) {
			[s appendFormat: @"<VisibleDamageList>%@</VisibleDamageList>", [CSCArrayOfString serialize: self.VisibleDamageList]];
		} else {
			[s appendString: @"<VisibleDamageList/>"];
		}

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCVehicleDamage class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
