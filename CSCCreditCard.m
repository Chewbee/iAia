/*
	CSCCreditCard.h
	The implementation of properties and methods for the CSCCreditCard object.
	Generated by SudzC.com
*/
#import "CSCCreditCard.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCOrganization.h"
#import "CSCPerson.h"
@implementation CSCCreditCard
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize AddressCategory = _AddressCategory;
	@synthesize AddressCategoryLabel = _AddressCategoryLabel;
	@synthesize AddressIdentifier = _AddressIdentifier;
	@synthesize Confidential = _Confidential;
	@synthesize Invalid = _Invalid;
	@synthesize Organization = _Organization;
	@synthesize Person = _Person;
	@synthesize Preferred = _Preferred;
	@synthesize CountryCode = _CountryCode;
	@synthesize CVVNumber = _CVVNumber;
	@synthesize CardHolderName = _CardHolderName;
	@synthesize CardNumber = _CardNumber;
	@synthesize CardType = _CardType;
	@synthesize CurrencyCode = _CurrencyCode;
	@synthesize ExchangeLevel = _ExchangeLevel;
	@synthesize ExpiryDate = _ExpiryDate;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.AddressCategory = nil;
			self.AddressCategoryLabel = nil;
			self.AddressIdentifier = nil;
			self.Organization = nil; // [[CSCOrganization alloc] init];
			self.Person = nil; // [[CSCPerson alloc] init];
			self.CountryCode = nil;
			self.CVVNumber = nil;
			self.CardHolderName = nil;
			self.CardNumber = nil;
			self.CardType = nil;
			self.CurrencyCode = nil;
			self.ExchangeLevel = nil;
			self.ExpiryDate = nil;

		}
		return self;
	}

	+ (CSCCreditCard*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCCreditCard*)[[CSCCreditCard alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.AddressCategory = [Soap getNodeValue: node withName: @"AddressCategory"];
			self.AddressCategoryLabel = [Soap getNodeValue: node withName: @"AddressCategoryLabel"];
			self.AddressIdentifier = [Soap getNodeValue: node withName: @"AddressIdentifier"];
			self.Confidential = [[Soap getNodeValue: node withName: @"Confidential"] boolValue];
			self.Invalid = [[Soap getNodeValue: node withName: @"Invalid"] boolValue];
			self.Organization = [[CSCOrganization createWithNode: [Soap getNode: node withName: @"Organization"]] object];
			self.Person = [[CSCPerson createWithNode: [Soap getNode: node withName: @"Person"]] object];
			self.Preferred = [[Soap getNodeValue: node withName: @"Preferred"] boolValue];
			self.CountryCode = [Soap getNodeValue: node withName: @"CountryCode"];
			self.CVVNumber = [Soap getNodeValue: node withName: @"CVVNumber"];
			self.CardHolderName = [Soap getNodeValue: node withName: @"CardHolderName"];
			self.CardNumber = [Soap getNodeValue: node withName: @"CardNumber"];
			self.CardType = [Soap getNodeValue: node withName: @"CardType"];
			self.CurrencyCode = [Soap getNodeValue: node withName: @"CurrencyCode"];
			self.ExchangeLevel = [Soap getNodeValue: node withName: @"ExchangeLevel"];
			self.ExpiryDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"ExpiryDate"]];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"CreditCard"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.AddressCategory != nil) [s appendFormat: @"<AddressCategory>%@</AddressCategory>", [[self.AddressCategory stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.AddressCategoryLabel != nil) [s appendFormat: @"<AddressCategoryLabel>%@</AddressCategoryLabel>", [[self.AddressCategoryLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.AddressIdentifier != nil) [s appendFormat: @"<AddressIdentifier>%@</AddressIdentifier>", [[self.AddressIdentifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<Confidential>%@</Confidential>", (self.Confidential)?@"true":@"false"];
		[s appendFormat: @"<Invalid>%@</Invalid>", (self.Invalid)?@"true":@"false"];
		if (self.Organization != nil) [s appendString: [self.Organization serialize: @"Organization"]];
		if (self.Person != nil) [s appendString: [self.Person serialize: @"Person"]];
		[s appendFormat: @"<Preferred>%@</Preferred>", (self.Preferred)?@"true":@"false"];
		if (self.CountryCode != nil) [s appendFormat: @"<CountryCode>%@</CountryCode>", [[self.CountryCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CVVNumber != nil) [s appendFormat: @"<CVVNumber>%@</CVVNumber>", [[self.CVVNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CardHolderName != nil) [s appendFormat: @"<CardHolderName>%@</CardHolderName>", [[self.CardHolderName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CardNumber != nil) [s appendFormat: @"<CardNumber>%@</CardNumber>", [[self.CardNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CardType != nil) [s appendFormat: @"<CardType>%@</CardType>", [[self.CardType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CurrencyCode != nil) [s appendFormat: @"<CurrencyCode>%@</CurrencyCode>", [[self.CurrencyCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ExchangeLevel != nil) [s appendFormat: @"<ExchangeLevel>%@</ExchangeLevel>", [[self.ExchangeLevel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ExpiryDate != nil) [s appendFormat: @"<ExpiryDate>%@</ExpiryDate>", [Soap getDateString: self.ExpiryDate]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCCreditCard class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
