/*
	CSCMoneyIn.h
	The implementation of properties and methods for the CSCMoneyIn object.
	Generated by SudzC.com
*/
#import "CSCMoneyIn.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCBankAccount.h"
@implementation CSCMoneyIn
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize BankCheckNumber = _BankCheckNumber;
	@synthesize BankCode = _BankCode;
	@synthesize BranchCode = _BranchCode;
	@synthesize ContractNumber = _ContractNumber;
	@synthesize DepositBankAccount = _DepositBankAccount;
	@synthesize DepositDate = _DepositDate;
	@synthesize PaymentType = _PaymentType;
	@synthesize ReceiptDate = _ReceiptDate;
	@synthesize ReceiptNumber = _ReceiptNumber;
	@synthesize Status = _Status;
	@synthesize TrackingCode = _TrackingCode;
	@synthesize Type = _Type;

	- (id) init
	{
		if(self = [super init])
		{
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.BankCheckNumber = nil;
			self.BankCode = nil;
			self.BranchCode = nil;
			self.ContractNumber = nil;
			self.DepositBankAccount = nil; // [[CSCBankAccount alloc] init];
			self.DepositDate = nil;
			self.PaymentType = nil;
			self.ReceiptDate = nil;
			self.ReceiptNumber = nil;
			self.Status = nil;
			self.TrackingCode = nil;
			self.Type = nil;

		}
		return self;
	}

	+ (CSCMoneyIn*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCMoneyIn*)[[CSCMoneyIn alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.BankCheckNumber = [Soap getNodeValue: node withName: @"BankCheckNumber"];
			self.BankCode = [Soap getNodeValue: node withName: @"BankCode"];
			self.BranchCode = [Soap getNodeValue: node withName: @"BranchCode"];
			self.ContractNumber = [Soap getNodeValue: node withName: @"ContractNumber"];
			self.DepositBankAccount = [[CSCBankAccount createWithNode: [Soap getNode: node withName: @"DepositBankAccount"]] object];
			self.DepositDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"DepositDate"]];
			self.PaymentType = [Soap getNodeValue: node withName: @"PaymentType"];
			self.ReceiptDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"ReceiptDate"]];
			self.ReceiptNumber = [Soap getNodeValue: node withName: @"ReceiptNumber"];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.TrackingCode = [Soap getNodeValue: node withName: @"TrackingCode"];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"MoneyIn"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.BankCheckNumber != nil) [s appendFormat: @"<BankCheckNumber>%@</BankCheckNumber>", [[self.BankCheckNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BankCode != nil) [s appendFormat: @"<BankCode>%@</BankCode>", [[self.BankCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BranchCode != nil) [s appendFormat: @"<BranchCode>%@</BranchCode>", [[self.BranchCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ContractNumber != nil) [s appendFormat: @"<ContractNumber>%@</ContractNumber>", [[self.ContractNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DepositBankAccount != nil) [s appendString: [self.DepositBankAccount serialize: @"DepositBankAccount"]];
		if (self.DepositDate != nil) [s appendFormat: @"<DepositDate>%@</DepositDate>", [Soap getDateString: self.DepositDate]];
		if (self.PaymentType != nil) [s appendFormat: @"<PaymentType>%@</PaymentType>", [[self.PaymentType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ReceiptDate != nil) [s appendFormat: @"<ReceiptDate>%@</ReceiptDate>", [Soap getDateString: self.ReceiptDate]];
		if (self.ReceiptNumber != nil) [s appendFormat: @"<ReceiptNumber>%@</ReceiptNumber>", [[self.ReceiptNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TrackingCode != nil) [s appendFormat: @"<TrackingCode>%@</TrackingCode>", [[self.TrackingCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCMoneyIn class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
