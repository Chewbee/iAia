/*
	CSCFundsAllocation.h
	The implementation of properties and methods for the CSCFundsAllocation object.
	Generated by SudzC.com
*/
#import "CSCFundsAllocation.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCArrayOfAllocation.h"
#import "CSCArrayOfAllocation.h"
@implementation CSCFundsAllocation
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize DisinvestmentList = _DisinvestmentList;
	@synthesize DisinvestmentMethod = _DisinvestmentMethod;
	@synthesize InvestmentList = _InvestmentList;
	@synthesize InvestmentMethod = _InvestmentMethod;
	@synthesize Label = _Label;
	@synthesize VersionDate = _VersionDate;
	@synthesize VersionNumber = _VersionNumber;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.DisinvestmentList = [[NSMutableArray alloc] init];
			self.DisinvestmentMethod = nil;
			self.InvestmentList = [[NSMutableArray alloc] init];
			self.InvestmentMethod = nil;
			self.Label = nil;
			self.VersionDate = nil;
			self.VersionNumber = nil;

		}
		return self;
	}

	+ (CSCFundsAllocation*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCFundsAllocation*)[[CSCFundsAllocation alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.DisinvestmentList = [[CSCArrayOfAllocation createWithNode: [Soap getNode: node withName: @"DisinvestmentList"]] object];
			self.DisinvestmentMethod = [Soap getNodeValue: node withName: @"DisinvestmentMethod"];
			self.InvestmentList = [[CSCArrayOfAllocation createWithNode: [Soap getNode: node withName: @"InvestmentList"]] object];
			self.InvestmentMethod = [Soap getNodeValue: node withName: @"InvestmentMethod"];
			self.Label = [Soap getNodeValue: node withName: @"Label"];
			self.VersionDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"VersionDate"]];
			self.VersionNumber = [Soap getNodeValue: node withName: @"VersionNumber"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"FundsAllocation"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.DisinvestmentList != nil && self.DisinvestmentList.count > 0) {
			[s appendFormat: @"<DisinvestmentList>%@</DisinvestmentList>", [CSCArrayOfAllocation serialize: self.DisinvestmentList]];
		} else {
			[s appendString: @"<DisinvestmentList/>"];
		}
		if (self.DisinvestmentMethod != nil) [s appendFormat: @"<DisinvestmentMethod>%@</DisinvestmentMethod>", [[self.DisinvestmentMethod stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.InvestmentList != nil && self.InvestmentList.count > 0) {
			[s appendFormat: @"<InvestmentList>%@</InvestmentList>", [CSCArrayOfAllocation serialize: self.InvestmentList]];
		} else {
			[s appendString: @"<InvestmentList/>"];
		}
		if (self.InvestmentMethod != nil) [s appendFormat: @"<InvestmentMethod>%@</InvestmentMethod>", [[self.InvestmentMethod stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Label != nil) [s appendFormat: @"<Label>%@</Label>", [[self.Label stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.VersionDate != nil) [s appendFormat: @"<VersionDate>%@</VersionDate>", [Soap getDateString: self.VersionDate]];
		if (self.VersionNumber != nil) [s appendFormat: @"<VersionNumber>%@</VersionNumber>", [[self.VersionNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCFundsAllocation class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
