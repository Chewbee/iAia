/*
	CSCFeesOverride.h
	The implementation of properties and methods for the CSCFeesOverride object.
	Generated by SudzC.com
*/
#import "CSCFeesOverride.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCCoverageFund.h"
#import "CSCArrayOfString.h"
@implementation CSCFeesOverride
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize AdministratorType = _AdministratorType;
	@synthesize Amount = _Amount;
	@synthesize AuthorizationLevel = _AuthorizationLevel;
	@synthesize CoverageFund = _CoverageFund;
	@synthesize DefinitionLevel = _DefinitionLevel;
	@synthesize Identifier = _Identifier;
	@synthesize MinimumAmount = _MinimumAmount;
	@synthesize MinimumRate = _MinimumRate;
	@synthesize Motive = _Motive;
	@synthesize MotiveList = _MotiveList;
	@synthesize OverridingMode = _OverridingMode;
	@synthesize PremiumType = _PremiumType;
	@synthesize Rate = _Rate;
	@synthesize Scope = _Scope;
	@synthesize Type = _Type;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.AdministratorType = nil;
			self.Amount = nil;
			self.AuthorizationLevel = nil;
			self.CoverageFund = nil; // [[CSCCoverageFund alloc] init];
			self.DefinitionLevel = nil;
			self.Identifier = nil;
			self.MinimumAmount = nil;
			self.MinimumRate = nil;
			self.Motive = nil;
			self.MotiveList = [[NSMutableArray alloc] init];
			self.OverridingMode = nil;
			self.PremiumType = nil;
			self.Rate = nil;
			self.Scope = nil;
			self.Type = nil;

		}
		return self;
	}

	+ (CSCFeesOverride*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCFeesOverride*)[[CSCFeesOverride alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.AdministratorType = [Soap getNodeValue: node withName: @"AdministratorType"];
			self.Amount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Amount"]];
			self.AuthorizationLevel = [Soap getNodeValue: node withName: @"AuthorizationLevel"];
			self.CoverageFund = [[CSCCoverageFund createWithNode: [Soap getNode: node withName: @"CoverageFund"]] object];
			self.DefinitionLevel = [Soap getNodeValue: node withName: @"DefinitionLevel"];
			self.Identifier = [Soap getNodeValue: node withName: @"Identifier"];
			self.MinimumAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"MinimumAmount"]];
			self.MinimumRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"MinimumRate"]];
			self.Motive = [Soap getNodeValue: node withName: @"Motive"];
			self.MotiveList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"MotiveList"]] object];
			self.OverridingMode = [Soap getNodeValue: node withName: @"OverridingMode"];
			self.PremiumType = [Soap getNodeValue: node withName: @"PremiumType"];
			self.Rate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Rate"]];
			self.Scope = [Soap getNodeValue: node withName: @"Scope"];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"FeesOverride"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.AdministratorType != nil) [s appendFormat: @"<AdministratorType>%@</AdministratorType>", [[self.AdministratorType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Amount != nil) [s appendFormat: @"<Amount>%@</Amount>", [NSString stringWithFormat: @"%@", self.Amount]];
		if (self.AuthorizationLevel != nil) [s appendFormat: @"<AuthorizationLevel>%@</AuthorizationLevel>", [[self.AuthorizationLevel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CoverageFund != nil) [s appendString: [self.CoverageFund serialize: @"CoverageFund"]];
		if (self.DefinitionLevel != nil) [s appendFormat: @"<DefinitionLevel>%@</DefinitionLevel>", [[self.DefinitionLevel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Identifier != nil) [s appendFormat: @"<Identifier>%@</Identifier>", [[self.Identifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MinimumAmount != nil) [s appendFormat: @"<MinimumAmount>%@</MinimumAmount>", [NSString stringWithFormat: @"%@", self.MinimumAmount]];
		if (self.MinimumRate != nil) [s appendFormat: @"<MinimumRate>%@</MinimumRate>", [NSString stringWithFormat: @"%@", self.MinimumRate]];
		if (self.Motive != nil) [s appendFormat: @"<Motive>%@</Motive>", [[self.Motive stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MotiveList != nil && self.MotiveList.count > 0) {
			[s appendFormat: @"<MotiveList>%@</MotiveList>", [CSCArrayOfString serialize: self.MotiveList]];
		} else {
			[s appendString: @"<MotiveList/>"];
		}
		if (self.OverridingMode != nil) [s appendFormat: @"<OverridingMode>%@</OverridingMode>", [[self.OverridingMode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PremiumType != nil) [s appendFormat: @"<PremiumType>%@</PremiumType>", [[self.PremiumType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Rate != nil) [s appendFormat: @"<Rate>%@</Rate>", [NSString stringWithFormat: @"%@", self.Rate]];
		if (self.Scope != nil) [s appendFormat: @"<Scope>%@</Scope>", [[self.Scope stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCFeesOverride class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
