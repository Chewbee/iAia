/*
 CSCWorkManagementClientExample.m
 Provides example and test runs the service's proxy methods.
 Generated by SudzC.com
 */
#import "CSCWorkManagementClientContractDisplayExtract.h"
#import "CSCContractDisplayExtractService.h"

@implementation CSCWorkManagementClientContractDisplayExtract
@synthesize faulty ;

- (void)invokeService
{
	// Create the service
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults] ;
    NSString *login = [defaults stringForKey:@"login_preference" ] ;
    NSString *password = [defaults stringForKey:@"password_preference" ] ;
    NSString *clientNumber = [defaults stringForKey:@"number_preference" ] ;
    
	CSCContractDisplayExtractService* service = [CSCContractDisplayExtractService serviceWithUsername:login andPassword:password] ;
    
	service.logging = YES;
	
    CSCContract *cscContract = [[CSCContract alloc]init];
    CSCPartyRole *role = [[CSCPartyRole alloc]init];
    CSCPerson *dude = [[CSCPerson alloc]init] ;
    /*
     [dude setFirstName:@"Georges-Henry"];
    [dude setLastName:@"PORTEFAIT"];
    */
    [dude setClientNumber:clientNumber];
    [role setPerson:dude];
    [cscContract.RoleList addObject:role];
    
	// Returns NSMutableArray*.
	[service ContractDisplayExtract:self action:@selector(ContractDisplayExtractHandler:) Environment: [[CSCWMEnv alloc] init] Contract: cscContract ];
}
// Handle the response from ContractDisplayExtract.
- (void) ContractDisplayExtractHandler: (id) value
{
    // Do something with the NSMutableArray* result
    NSMutableArray* result = (NSMutableArray*)value ;
    //
    [self setServiceAnswer:result] ;
    [self setFaulty:FALSE];
    
#ifdef MOCKING
    NSLog(@"Mocking returns");
    return ;
#else
	// Handle errors
	if([value isKindOfClass:[NSError class]]) {
        NSString *errorMsg = [(NSError*)value localizedDescription] ;
		NSLog(@"ERROR : %@", value);
        UIAlertView* alertView = [[UIAlertView alloc]initWithTitle:@"Error" message:errorMsg delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
        [alertView show] ;
        [self setFaulty:TRUE];
		return;
	}
	// Handle faults
	if([value isKindOfClass:[SoapFault class]]) {
        NSString *errorMsg = [(SoapFault*)value faultString] ;
        NSLog(@"SOAP FAULT :%@", value);
        UIAlertView* alertView = [[UIAlertView alloc]initWithTitle:@"Fault" message:errorMsg delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
        [alertView show] ;
        [self setFaulty:TRUE];
		return;

        NSLog(@"ContractDisplayExtract returned the value: %@", [self serviceAnswer]);
#endif
}
//
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    [alertView dismissWithClickedButtonIndex:0 animated:TRUE ] ; 
}

@end
