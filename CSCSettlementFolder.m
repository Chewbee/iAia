/*
	CSCSettlementFolder.h
	The implementation of properties and methods for the CSCSettlementFolder object.
	Generated by SudzC.com
*/
#import "CSCSettlementFolder.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCClaimFolder.h"
#import "CSCCoverage.h"
#import "CSCArrayOfOperation.h"
#import "CSCArrayOfPartyRole.h"
#import "CSCArrayOfSettlementBeneficiary.h"
#import "CSCArrayOfSettlementItem.h"
#import "CSCArrayOfSettlement.h"
@implementation CSCSettlementFolder
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize AcceptanceDate = _AcceptanceDate;
	@synthesize AcceptanceDecision = _AcceptanceDecision;
	@synthesize ClaimFolder = _ClaimFolder;
	@synthesize Coverage = _Coverage;
	@synthesize Identifier = _Identifier;
	@synthesize Label = _Label;
	@synthesize OperationList = _OperationList;
	@synthesize RoleList = _RoleList;
	@synthesize SettlementBeneficiaryList = _SettlementBeneficiaryList;
	@synthesize SettlementItemList = _SettlementItemList;
	@synthesize SettlementList = _SettlementList;
	@synthesize Status = _Status;
	@synthesize StatusDate = _StatusDate;
	@synthesize StatusLabel = _StatusLabel;
	@synthesize StatusMotive = _StatusMotive;
	@synthesize StatusMotiveLabel = _StatusMotiveLabel;
	@synthesize TotalAmount = _TotalAmount;
	@synthesize Type = _Type;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.AcceptanceDate = nil;
			self.AcceptanceDecision = nil;
			self.ClaimFolder = nil; // [[CSCClaimFolder alloc] init];
			self.Coverage = nil; // [[CSCCoverage alloc] init];
			self.Identifier = nil;
			self.Label = nil;
			self.OperationList = [[NSMutableArray alloc] init];
			self.RoleList = [[NSMutableArray alloc] init];
			self.SettlementBeneficiaryList = [[NSMutableArray alloc] init];
			self.SettlementItemList = [[NSMutableArray alloc] init];
			self.SettlementList = [[NSMutableArray alloc] init];
			self.Status = nil;
			self.StatusDate = nil;
			self.StatusLabel = nil;
			self.StatusMotive = nil;
			self.StatusMotiveLabel = nil;
			self.TotalAmount = nil;
			self.Type = nil;

		}
		return self;
	}

	+ (CSCSettlementFolder*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCSettlementFolder*)[[CSCSettlementFolder alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.AcceptanceDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"AcceptanceDate"]];
			self.AcceptanceDecision = [Soap getNodeValue: node withName: @"AcceptanceDecision"];
			self.ClaimFolder = [[CSCClaimFolder createWithNode: [Soap getNode: node withName: @"ClaimFolder"]] object];
			self.Coverage = [[CSCCoverage createWithNode: [Soap getNode: node withName: @"Coverage"]] object];
			self.Identifier = [Soap getNodeValue: node withName: @"Identifier"];
			self.Label = [Soap getNodeValue: node withName: @"Label"];
			self.OperationList = [[CSCArrayOfOperation createWithNode: [Soap getNode: node withName: @"OperationList"]] object];
			self.RoleList = [[CSCArrayOfPartyRole createWithNode: [Soap getNode: node withName: @"RoleList"]] object];
			self.SettlementBeneficiaryList = [[CSCArrayOfSettlementBeneficiary createWithNode: [Soap getNode: node withName: @"SettlementBeneficiaryList"]] object];
			self.SettlementItemList = [[CSCArrayOfSettlementItem createWithNode: [Soap getNode: node withName: @"SettlementItemList"]] object];
			self.SettlementList = [[CSCArrayOfSettlement createWithNode: [Soap getNode: node withName: @"SettlementList"]] object];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.StatusDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StatusDate"]];
			self.StatusLabel = [Soap getNodeValue: node withName: @"StatusLabel"];
			self.StatusMotive = [Soap getNodeValue: node withName: @"StatusMotive"];
			self.StatusMotiveLabel = [Soap getNodeValue: node withName: @"StatusMotiveLabel"];
			self.TotalAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TotalAmount"]];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"SettlementFolder"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.AcceptanceDate != nil) [s appendFormat: @"<AcceptanceDate>%@</AcceptanceDate>", [Soap getDateString: self.AcceptanceDate]];
		if (self.AcceptanceDecision != nil) [s appendFormat: @"<AcceptanceDecision>%@</AcceptanceDecision>", [[self.AcceptanceDecision stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ClaimFolder != nil) [s appendString: [self.ClaimFolder serialize: @"ClaimFolder"]];
		if (self.Coverage != nil) [s appendString: [self.Coverage serialize: @"Coverage"]];
		if (self.Identifier != nil) [s appendFormat: @"<Identifier>%@</Identifier>", [[self.Identifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Label != nil) [s appendFormat: @"<Label>%@</Label>", [[self.Label stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.OperationList != nil && self.OperationList.count > 0) {
			[s appendFormat: @"<OperationList>%@</OperationList>", [CSCArrayOfOperation serialize: self.OperationList]];
		} else {
			[s appendString: @"<OperationList/>"];
		}
		if (self.RoleList != nil && self.RoleList.count > 0) {
			[s appendFormat: @"<RoleList>%@</RoleList>", [CSCArrayOfPartyRole serialize: self.RoleList]];
		} else {
			[s appendString: @"<RoleList/>"];
		}
		if (self.SettlementBeneficiaryList != nil && self.SettlementBeneficiaryList.count > 0) {
			[s appendFormat: @"<SettlementBeneficiaryList>%@</SettlementBeneficiaryList>", [CSCArrayOfSettlementBeneficiary serialize: self.SettlementBeneficiaryList]];
		} else {
			[s appendString: @"<SettlementBeneficiaryList/>"];
		}
		if (self.SettlementItemList != nil && self.SettlementItemList.count > 0) {
			[s appendFormat: @"<SettlementItemList>%@</SettlementItemList>", [CSCArrayOfSettlementItem serialize: self.SettlementItemList]];
		} else {
			[s appendString: @"<SettlementItemList/>"];
		}
		if (self.SettlementList != nil && self.SettlementList.count > 0) {
			[s appendFormat: @"<SettlementList>%@</SettlementList>", [CSCArrayOfSettlement serialize: self.SettlementList]];
		} else {
			[s appendString: @"<SettlementList/>"];
		}
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StatusDate != nil) [s appendFormat: @"<StatusDate>%@</StatusDate>", [Soap getDateString: self.StatusDate]];
		if (self.StatusLabel != nil) [s appendFormat: @"<StatusLabel>%@</StatusLabel>", [[self.StatusLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StatusMotive != nil) [s appendFormat: @"<StatusMotive>%@</StatusMotive>", [[self.StatusMotive stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StatusMotiveLabel != nil) [s appendFormat: @"<StatusMotiveLabel>%@</StatusMotiveLabel>", [[self.StatusMotiveLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TotalAmount != nil) [s appendFormat: @"<TotalAmount>%@</TotalAmount>", [NSString stringWithFormat: @"%@", self.TotalAmount]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCSettlementFolder class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
