/*
	CSCSettlementTax.h
	The implementation of properties and methods for the CSCSettlementTax object.
	Generated by SudzC.com
*/
#import "CSCSettlementTax.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCOrganization.h"
#import "CSCPerson.h"
#import "CSCOrganization.h"
#import "CSCBankAccount.h"
#import "CSCPostalAddress.h"
@implementation CSCSettlementTax
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize AmountAdjustment = _AmountAdjustment;
	@synthesize BasisAdjustment = _BasisAdjustment;
	@synthesize ExemptionMotive = _ExemptionMotive;
	@synthesize ExemptionMotiveLabel = _ExemptionMotiveLabel;
	@synthesize NetAmount = _NetAmount;
	@synthesize Organization = _Organization;
	@synthesize Person = _Person;
	@synthesize Status = _Status;
	@synthesize StatusDate = _StatusDate;
	@synthesize StatusLabel = _StatusLabel;
	@synthesize TaxAmount = _TaxAmount;
	@synthesize TaxPaymentDelegation = _TaxPaymentDelegation;
	@synthesize TaxRelief = _TaxRelief;
	@synthesize TaxRelief2 = _TaxRelief2;
	@synthesize TotalAbattement990I = _TotalAbattement990I;
	@synthesize TotalMontantDelegue757B = _TotalMontantDelegue757B;
	@synthesize TotalPrimes757B = _TotalPrimes757B;
	@synthesize Treasury = _Treasury;
	@synthesize TreasuryBankAccount = _TreasuryBankAccount;
	@synthesize TreasuryPaymentType = _TreasuryPaymentType;
	@synthesize TreasuryPostalAddress = _TreasuryPostalAddress;
	@synthesize Type = _Type;

	- (id) init
	{
		if(self = [super init])
		{
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.AmountAdjustment = nil;
			self.BasisAdjustment = nil;
			self.ExemptionMotive = nil;
			self.ExemptionMotiveLabel = nil;
			self.NetAmount = nil;
			self.Organization = nil; // [[CSCOrganization alloc] init];
			self.Person = nil; // [[CSCPerson alloc] init];
			self.Status = nil;
			self.StatusDate = nil;
			self.StatusLabel = nil;
			self.TaxAmount = nil;
			self.TaxPaymentDelegation = nil;
			self.TaxRelief = nil;
			self.TaxRelief2 = nil;
			self.TotalAbattement990I = nil;
			self.TotalMontantDelegue757B = nil;
			self.TotalPrimes757B = nil;
			self.Treasury = nil; // [[CSCOrganization alloc] init];
			self.TreasuryBankAccount = nil; // [[CSCBankAccount alloc] init];
			self.TreasuryPaymentType = nil;
			self.TreasuryPostalAddress = nil; // [[CSCPostalAddress alloc] init];
			self.Type = nil;

		}
		return self;
	}

	+ (CSCSettlementTax*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCSettlementTax*)[[CSCSettlementTax alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.AmountAdjustment = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"AmountAdjustment"]];
			self.BasisAdjustment = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"BasisAdjustment"]];
			self.ExemptionMotive = [Soap getNodeValue: node withName: @"ExemptionMotive"];
			self.ExemptionMotiveLabel = [Soap getNodeValue: node withName: @"ExemptionMotiveLabel"];
			self.NetAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"NetAmount"]];
			self.Organization = [[CSCOrganization createWithNode: [Soap getNode: node withName: @"Organization"]] object];
			self.Person = [[CSCPerson createWithNode: [Soap getNode: node withName: @"Person"]] object];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.StatusDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StatusDate"]];
			self.StatusLabel = [Soap getNodeValue: node withName: @"StatusLabel"];
			self.TaxAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TaxAmount"]];
			self.TaxPaymentDelegation = [Soap getNodeValue: node withName: @"TaxPaymentDelegation"];
			self.TaxRelief = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TaxRelief"]];
			self.TaxRelief2 = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TaxRelief2"]];
			self.TotalAbattement990I = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TotalAbattement990I"]];
			self.TotalMontantDelegue757B = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TotalMontantDelegue757B"]];
			self.TotalPrimes757B = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TotalPrimes757B"]];
			self.Treasury = [[CSCOrganization createWithNode: [Soap getNode: node withName: @"Treasury"]] object];
			self.TreasuryBankAccount = [[CSCBankAccount createWithNode: [Soap getNode: node withName: @"TreasuryBankAccount"]] object];
			self.TreasuryPaymentType = [Soap getNodeValue: node withName: @"TreasuryPaymentType"];
			self.TreasuryPostalAddress = [[CSCPostalAddress createWithNode: [Soap getNode: node withName: @"TreasuryPostalAddress"]] object];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"SettlementTax"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.AmountAdjustment != nil) [s appendFormat: @"<AmountAdjustment>%@</AmountAdjustment>", [NSString stringWithFormat: @"%@", self.AmountAdjustment]];
		if (self.BasisAdjustment != nil) [s appendFormat: @"<BasisAdjustment>%@</BasisAdjustment>", [NSString stringWithFormat: @"%@", self.BasisAdjustment]];
		if (self.ExemptionMotive != nil) [s appendFormat: @"<ExemptionMotive>%@</ExemptionMotive>", [[self.ExemptionMotive stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ExemptionMotiveLabel != nil) [s appendFormat: @"<ExemptionMotiveLabel>%@</ExemptionMotiveLabel>", [[self.ExemptionMotiveLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.NetAmount != nil) [s appendFormat: @"<NetAmount>%@</NetAmount>", [NSString stringWithFormat: @"%@", self.NetAmount]];
		if (self.Organization != nil) [s appendString: [self.Organization serialize: @"Organization"]];
		if (self.Person != nil) [s appendString: [self.Person serialize: @"Person"]];
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StatusDate != nil) [s appendFormat: @"<StatusDate>%@</StatusDate>", [Soap getDateString: self.StatusDate]];
		if (self.StatusLabel != nil) [s appendFormat: @"<StatusLabel>%@</StatusLabel>", [[self.StatusLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TaxAmount != nil) [s appendFormat: @"<TaxAmount>%@</TaxAmount>", [NSString stringWithFormat: @"%@", self.TaxAmount]];
		if (self.TaxPaymentDelegation != nil) [s appendFormat: @"<TaxPaymentDelegation>%@</TaxPaymentDelegation>", [[self.TaxPaymentDelegation stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TaxRelief != nil) [s appendFormat: @"<TaxRelief>%@</TaxRelief>", [NSString stringWithFormat: @"%@", self.TaxRelief]];
		if (self.TaxRelief2 != nil) [s appendFormat: @"<TaxRelief2>%@</TaxRelief2>", [NSString stringWithFormat: @"%@", self.TaxRelief2]];
		if (self.TotalAbattement990I != nil) [s appendFormat: @"<TotalAbattement990I>%@</TotalAbattement990I>", [NSString stringWithFormat: @"%@", self.TotalAbattement990I]];
		if (self.TotalMontantDelegue757B != nil) [s appendFormat: @"<TotalMontantDelegue757B>%@</TotalMontantDelegue757B>", [NSString stringWithFormat: @"%@", self.TotalMontantDelegue757B]];
		if (self.TotalPrimes757B != nil) [s appendFormat: @"<TotalPrimes757B>%@</TotalPrimes757B>", [NSString stringWithFormat: @"%@", self.TotalPrimes757B]];
		if (self.Treasury != nil) [s appendString: [self.Treasury serialize: @"Treasury"]];
		if (self.TreasuryBankAccount != nil) [s appendString: [self.TreasuryBankAccount serialize: @"TreasuryBankAccount"]];
		if (self.TreasuryPaymentType != nil) [s appendFormat: @"<TreasuryPaymentType>%@</TreasuryPaymentType>", [[self.TreasuryPaymentType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TreasuryPostalAddress != nil) [s appendString: [self.TreasuryPostalAddress serialize: @"TreasuryPostalAddress"]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCSettlementTax class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
