/*
	CSCPartyRole.h
	The implementation of properties and methods for the CSCPartyRole object.
	Generated by SudzC.com
*/
#import "CSCPartyRole.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCArrayOfContract.h"
#import "CSCArrayOfCoverage.h"
#import "CSCDistributorDetail.h"
#import "CSCOrganization.h"
#import "CSCPerson.h"
#import "CSCArrayOfPartyRole.h"
@implementation CSCPartyRole
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize ContractList = _ContractList;
	@synthesize ContractRoleCategory = _ContractRoleCategory;
	@synthesize CoverageList = _CoverageList;
	@synthesize DistributorDetail = _DistributorDetail;
	@synthesize FullType = _FullType;
	@synthesize FullTypeLabel = _FullTypeLabel;
	@synthesize Identifier = _Identifier;
	@synthesize Main = _Main;
	@synthesize Organization = _Organization;
	@synthesize PartyType = _PartyType;
	@synthesize Person = _Person;
	@synthesize RoleList = _RoleList;
	@synthesize RoleType = _RoleType;
	@synthesize RoleTypeLabel = _RoleTypeLabel;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.ContractList = [[NSMutableArray alloc] init];
			self.ContractRoleCategory = nil;
			self.CoverageList = [[NSMutableArray alloc] init];
			self.DistributorDetail = nil; // [[CSCDistributorDetail alloc] init];
			self.FullType = nil;
			self.FullTypeLabel = nil;
			self.Identifier = nil;
			self.Organization = nil; // [[CSCOrganization alloc] init];
			self.PartyType = nil;
			self.Person = nil; // [[CSCPerson alloc] init];
			self.RoleList = [[NSMutableArray alloc] init];
			self.RoleType = nil;
			self.RoleTypeLabel = nil;

		}
		return self;
	}

	+ (CSCPartyRole*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCPartyRole*)[[CSCPartyRole alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.ContractList = [[CSCArrayOfContract createWithNode: [Soap getNode: node withName: @"ContractList"]] object];
			self.ContractRoleCategory = [Soap getNodeValue: node withName: @"ContractRoleCategory"];
			self.CoverageList = [[CSCArrayOfCoverage createWithNode: [Soap getNode: node withName: @"CoverageList"]] object];
			self.DistributorDetail = [[CSCDistributorDetail createWithNode: [Soap getNode: node withName: @"DistributorDetail"]] object];
			self.FullType = [Soap getNodeValue: node withName: @"FullType"];
			self.FullTypeLabel = [Soap getNodeValue: node withName: @"FullTypeLabel"];
			self.Identifier = [Soap getNodeValue: node withName: @"Identifier"];
			self.Main = [[Soap getNodeValue: node withName: @"Main"] boolValue];
			self.Organization = [[CSCOrganization createWithNode: [Soap getNode: node withName: @"Organization"]] object];
			self.PartyType = [Soap getNodeValue: node withName: @"PartyType"];
			self.Person = [[CSCPerson createWithNode: [Soap getNode: node withName: @"Person"]] object];
			self.RoleList = [[CSCArrayOfPartyRole createWithNode: [Soap getNode: node withName: @"RoleList"]] object];
			self.RoleType = [Soap getNodeValue: node withName: @"RoleType"];
			self.RoleTypeLabel = [Soap getNodeValue: node withName: @"RoleTypeLabel"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"PartyRole"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.ContractList != nil && self.ContractList.count > 0) {
			[s appendFormat: @"<ContractList>%@</ContractList>", [CSCArrayOfContract serialize: self.ContractList]];
		} else {
			[s appendString: @"<ContractList/>"];
		}
		if (self.ContractRoleCategory != nil) [s appendFormat: @"<ContractRoleCategory>%@</ContractRoleCategory>", [[self.ContractRoleCategory stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CoverageList != nil && self.CoverageList.count > 0) {
			[s appendFormat: @"<CoverageList>%@</CoverageList>", [CSCArrayOfCoverage serialize: self.CoverageList]];
		} else {
			[s appendString: @"<CoverageList/>"];
		}
		if (self.DistributorDetail != nil) [s appendString: [self.DistributorDetail serialize: @"DistributorDetail"]];
		if (self.FullType != nil) [s appendFormat: @"<FullType>%@</FullType>", [[self.FullType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.FullTypeLabel != nil) [s appendFormat: @"<FullTypeLabel>%@</FullTypeLabel>", [[self.FullTypeLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Identifier != nil) [s appendFormat: @"<Identifier>%@</Identifier>", [[self.Identifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<Main>%@</Main>", (self.Main)?@"true":@"false"];
		if (self.Organization != nil) [s appendString: [self.Organization serialize: @"Organization"]];
		if (self.PartyType != nil) [s appendFormat: @"<PartyType>%@</PartyType>", [[self.PartyType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Person != nil) [s appendString: [self.Person serialize: @"Person"]];
		if (self.RoleList != nil && self.RoleList.count > 0) {
			[s appendFormat: @"<RoleList>%@</RoleList>", [CSCArrayOfPartyRole serialize: self.RoleList]];
		} else {
			[s appendString: @"<RoleList/>"];
		}
		if (self.RoleType != nil) [s appendFormat: @"<RoleType>%@</RoleType>", [[self.RoleType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.RoleTypeLabel != nil) [s appendFormat: @"<RoleTypeLabel>%@</RoleTypeLabel>", [[self.RoleTypeLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCPartyRole class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
