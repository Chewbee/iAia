/*
	CSCPhoneAddress.h
	The implementation of properties and methods for the CSCPhoneAddress object.
	Generated by SudzC.com
*/
#import "CSCPhoneAddress.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCOrganization.h"
#import "CSCPerson.h"
#import "CSCArrayOfString.h"
#import "CSCArrayOfString.h"
@implementation CSCPhoneAddress
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize AddressCategory = _AddressCategory;
	@synthesize AddressCategoryLabel = _AddressCategoryLabel;
	@synthesize AddressIdentifier = _AddressIdentifier;
	@synthesize Confidential = _Confidential;
	@synthesize Invalid = _Invalid;
	@synthesize Organization = _Organization;
	@synthesize Person = _Person;
	@synthesize Preferred = _Preferred;
	@synthesize CountryCode = _CountryCode;
	@synthesize Availability1 = _Availability1;
	@synthesize Availability2 = _Availability2;
	@synthesize CountryPhoneCode = _CountryPhoneCode;
	@synthesize EndTime1 = _EndTime1;
	@synthesize EndTime2 = _EndTime2;
	@synthesize PhoneNumber = _PhoneNumber;
	@synthesize PhoneType = _PhoneType;
	@synthesize StartTime1 = _StartTime1;
	@synthesize StartTime2 = _StartTime2;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.AddressCategory = nil;
			self.AddressCategoryLabel = nil;
			self.AddressIdentifier = nil;
			self.Organization = nil; // [[CSCOrganization alloc] init];
			self.Person = nil; // [[CSCPerson alloc] init];
			self.CountryCode = nil;
			self.Availability1 = [[NSMutableArray alloc] init];
			self.Availability2 = [[NSMutableArray alloc] init];
			self.CountryPhoneCode = nil;
			self.EndTime1 = nil;
			self.EndTime2 = nil;
			self.PhoneNumber = nil;
			self.PhoneType = nil;
			self.StartTime1 = nil;
			self.StartTime2 = nil;

		}
		return self;
	}

	+ (CSCPhoneAddress*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCPhoneAddress*)[[CSCPhoneAddress alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.AddressCategory = [Soap getNodeValue: node withName: @"AddressCategory"];
			self.AddressCategoryLabel = [Soap getNodeValue: node withName: @"AddressCategoryLabel"];
			self.AddressIdentifier = [Soap getNodeValue: node withName: @"AddressIdentifier"];
			self.Confidential = [[Soap getNodeValue: node withName: @"Confidential"] boolValue];
			self.Invalid = [[Soap getNodeValue: node withName: @"Invalid"] boolValue];
			self.Organization = [[CSCOrganization createWithNode: [Soap getNode: node withName: @"Organization"]] object];
			self.Person = [[CSCPerson createWithNode: [Soap getNode: node withName: @"Person"]] object];
			self.Preferred = [[Soap getNodeValue: node withName: @"Preferred"] boolValue];
			self.CountryCode = [Soap getNodeValue: node withName: @"CountryCode"];
			self.Availability1 = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"Availability1"]] object];
			self.Availability2 = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"Availability2"]] object];
			self.CountryPhoneCode = [Soap getNodeValue: node withName: @"CountryPhoneCode"];
			self.EndTime1 = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndTime1"]];
			self.EndTime2 = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndTime2"]];
			self.PhoneNumber = [Soap getNodeValue: node withName: @"PhoneNumber"];
			self.PhoneType = [Soap getNodeValue: node withName: @"PhoneType"];
			self.StartTime1 = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartTime1"]];
			self.StartTime2 = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartTime2"]];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"PhoneAddress"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.AddressCategory != nil) [s appendFormat: @"<AddressCategory>%@</AddressCategory>", [[self.AddressCategory stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.AddressCategoryLabel != nil) [s appendFormat: @"<AddressCategoryLabel>%@</AddressCategoryLabel>", [[self.AddressCategoryLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.AddressIdentifier != nil) [s appendFormat: @"<AddressIdentifier>%@</AddressIdentifier>", [[self.AddressIdentifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<Confidential>%@</Confidential>", (self.Confidential)?@"true":@"false"];
		[s appendFormat: @"<Invalid>%@</Invalid>", (self.Invalid)?@"true":@"false"];
		if (self.Organization != nil) [s appendString: [self.Organization serialize: @"Organization"]];
		if (self.Person != nil) [s appendString: [self.Person serialize: @"Person"]];
		[s appendFormat: @"<Preferred>%@</Preferred>", (self.Preferred)?@"true":@"false"];
		if (self.CountryCode != nil) [s appendFormat: @"<CountryCode>%@</CountryCode>", [[self.CountryCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Availability1 != nil && self.Availability1.count > 0) {
			[s appendFormat: @"<Availability1>%@</Availability1>", [CSCArrayOfString serialize: self.Availability1]];
		} else {
			[s appendString: @"<Availability1/>"];
		}
		if (self.Availability2 != nil && self.Availability2.count > 0) {
			[s appendFormat: @"<Availability2>%@</Availability2>", [CSCArrayOfString serialize: self.Availability2]];
		} else {
			[s appendString: @"<Availability2/>"];
		}
		if (self.CountryPhoneCode != nil) [s appendFormat: @"<CountryPhoneCode>%@</CountryPhoneCode>", [[self.CountryPhoneCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EndTime1 != nil) [s appendFormat: @"<EndTime1>%@</EndTime1>", [Soap getDateString: self.EndTime1]];
		if (self.EndTime2 != nil) [s appendFormat: @"<EndTime2>%@</EndTime2>", [Soap getDateString: self.EndTime2]];
		if (self.PhoneNumber != nil) [s appendFormat: @"<PhoneNumber>%@</PhoneNumber>", [[self.PhoneNumber stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PhoneType != nil) [s appendFormat: @"<PhoneType>%@</PhoneType>", [[self.PhoneType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StartTime1 != nil) [s appendFormat: @"<StartTime1>%@</StartTime1>", [Soap getDateString: self.StartTime1]];
		if (self.StartTime2 != nil) [s appendFormat: @"<StartTime2>%@</StartTime2>", [Soap getDateString: self.StartTime2]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCPhoneAddress class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
