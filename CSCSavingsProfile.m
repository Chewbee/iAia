/*
	CSCSavingsProfile.h
	The implementation of properties and methods for the CSCSavingsProfile object.
	Generated by SudzC.com
*/
#import "CSCSavingsProfile.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCArrayOfFundsAllocation.h"
#import "CSCPartyRole.h"
#import "CSCArrayOfPartyRole.h"
@implementation CSCSavingsProfile
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize Delegated = _Delegated;
	@synthesize FundsAllocationList = _FundsAllocationList;
	@synthesize Identifier = _Identifier;
	@synthesize Label = _Label;
	@synthesize Representative = _Representative;
	@synthesize RepresentativeList = _RepresentativeList;
	@synthesize Status = _Status;
	@synthesize TransientEnabled = _TransientEnabled;
	@synthesize Type = _Type;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.FundsAllocationList = [[NSMutableArray alloc] init];
			self.Identifier = nil;
			self.Label = nil;
			self.Representative = nil; // [[CSCPartyRole alloc] init];
			self.RepresentativeList = [[NSMutableArray alloc] init];
			self.Status = nil;
			self.Type = nil;

		}
		return self;
	}

	+ (CSCSavingsProfile*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCSavingsProfile*)[[CSCSavingsProfile alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.Delegated = [[Soap getNodeValue: node withName: @"Delegated"] boolValue];
			self.FundsAllocationList = [[CSCArrayOfFundsAllocation createWithNode: [Soap getNode: node withName: @"FundsAllocationList"]] object];
			self.Identifier = [Soap getNodeValue: node withName: @"Identifier"];
			self.Label = [Soap getNodeValue: node withName: @"Label"];
			self.Representative = [[CSCPartyRole createWithNode: [Soap getNode: node withName: @"Representative"]] object];
			self.RepresentativeList = [[CSCArrayOfPartyRole createWithNode: [Soap getNode: node withName: @"RepresentativeList"]] object];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.TransientEnabled = [[Soap getNodeValue: node withName: @"TransientEnabled"] boolValue];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"SavingsProfile"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		[s appendFormat: @"<Delegated>%@</Delegated>", (self.Delegated)?@"true":@"false"];
		if (self.FundsAllocationList != nil && self.FundsAllocationList.count > 0) {
			[s appendFormat: @"<FundsAllocationList>%@</FundsAllocationList>", [CSCArrayOfFundsAllocation serialize: self.FundsAllocationList]];
		} else {
			[s appendString: @"<FundsAllocationList/>"];
		}
		if (self.Identifier != nil) [s appendFormat: @"<Identifier>%@</Identifier>", [[self.Identifier stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Label != nil) [s appendFormat: @"<Label>%@</Label>", [[self.Label stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Representative != nil) [s appendString: [self.Representative serialize: @"Representative"]];
		if (self.RepresentativeList != nil && self.RepresentativeList.count > 0) {
			[s appendFormat: @"<RepresentativeList>%@</RepresentativeList>", [CSCArrayOfPartyRole serialize: self.RepresentativeList]];
		} else {
			[s appendString: @"<RepresentativeList/>"];
		}
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<TransientEnabled>%@</TransientEnabled>", (self.TransientEnabled)?@"true":@"false"];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCSavingsProfile class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
