/*
	CSCHealthItem.h
	The implementation of properties and methods for the CSCHealthItem object.
	Generated by SudzC.com
*/
#import "CSCHealthItem.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCArrayOfHealthAllocation.h"
#import "CSCHealthEstimate.h"
#import "CSCHealthInvoice.h"
#import "CSCLiabilityRequest.h"
#import "CSCPerson.h"
@implementation CSCHealthItem
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize EffectiveExpenses = _EffectiveExpenses;
	@synthesize Factor = _Factor;
	@synthesize MedicalCode = _MedicalCode;
	@synthesize MedicalCodeDetail = _MedicalCodeDetail;
	@synthesize MedicalCodeLabel = _MedicalCodeLabel;
	@synthesize MedicalStartDate = _MedicalStartDate;
	@synthesize Units = _Units;
	@synthesize AllocationList = _AllocationList;
	@synthesize Amount = _Amount;
	@synthesize CodeModificateur1 = _CodeModificateur1;
	@synthesize CodeModificateur2 = _CodeModificateur2;
	@synthesize CodeModificateur3 = _CodeModificateur3;
	@synthesize CodeModificateur4 = _CodeModificateur4;
	@synthesize CodeParcours1 = _CodeParcours1;
	@synthesize CodeParcours2 = _CodeParcours2;
	@synthesize CodePrescription = _CodePrescription;
	@synthesize CodeRegroupement = _CodeRegroupement;
	@synthesize CodeTicketModerateur = _CodeTicketModerateur;
	@synthesize DisciplineMedicoTarifaire = _DisciplineMedicoTarifaire;
	@synthesize DomaineCourtSejour = _DomaineCourtSejour;
	@synthesize Estimate = _Estimate;
	@synthesize InputExpenses = _InputExpenses;
	@synthesize Invoice = _Invoice;
	@synthesize LiabilityRequest = _LiabilityRequest;
	@synthesize LibelleParcours1 = _LibelleParcours1;
	@synthesize LibelleParcours2 = _LibelleParcours2;
	@synthesize MedicalCodeReference = _MedicalCodeReference;
	@synthesize MedicalEndDate = _MedicalEndDate;
	@synthesize MedicalProvider = _MedicalProvider;
	@synthesize ModeTraitement = _ModeTraitement;
	@synthesize NationalAgreementType = _NationalAgreementType;
	@synthesize NationalRefundAmount = _NationalRefundAmount;
	@synthesize NationalRefundBasis = _NationalRefundBasis;
	@synthesize NationalRefundRate = _NationalRefundRate;
	@synthesize NatureAssurance = _NatureAssurance;
	@synthesize No = _No;
	@synthesize OptionCoordination = _OptionCoordination;
	@synthesize Patient = _Patient;
	@synthesize PatientRank = _PatientRank;
	@synthesize Payer = _Payer;
	@synthesize PrescribingDoctor = _PrescribingDoctor;
	@synthesize PrescriptionDate = _PrescriptionDate;
	@synthesize Prevention = _Prevention;
	@synthesize QualificationDepense1 = _QualificationDepense1;
	@synthesize QualificationDepense2 = _QualificationDepense2;
	@synthesize ReferenceAmount = _ReferenceAmount;
	@synthesize SharedAmount = _SharedAmount;
	@synthesize Specialty = _Specialty;
	@synthesize TarifAutorite = _TarifAutorite;
	@synthesize TarifConvention = _TarifConvention;
	@synthesize TarifTiers = _TarifTiers;
	@synthesize TransferCode = _TransferCode;
	@synthesize TypePrestation = _TypePrestation;
	@synthesize UncoveredExpense = _UncoveredExpense;
	@synthesize UnitCost = _UnitCost;
	@synthesize ZoneTarif = _ZoneTarif;

	- (id) init
	{
		if(self = [super init])
		{
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.EffectiveExpenses = nil;
			self.Factor = nil;
			self.MedicalCode = nil;
			self.MedicalCodeDetail = nil;
			self.MedicalCodeLabel = nil;
			self.MedicalStartDate = nil;
			self.AllocationList = [[NSMutableArray alloc] init];
			self.Amount = nil;
			self.CodeModificateur1 = nil;
			self.CodeModificateur2 = nil;
			self.CodeModificateur3 = nil;
			self.CodeModificateur4 = nil;
			self.CodeParcours1 = nil;
			self.CodeParcours2 = nil;
			self.CodePrescription = nil;
			self.CodeRegroupement = nil;
			self.CodeTicketModerateur = nil;
			self.DisciplineMedicoTarifaire = nil;
			self.DomaineCourtSejour = nil;
			self.Estimate = nil; // [[CSCHealthEstimate alloc] init];
			self.InputExpenses = nil;
			self.Invoice = nil; // [[CSCHealthInvoice alloc] init];
			self.LiabilityRequest = nil; // [[CSCLiabilityRequest alloc] init];
			self.LibelleParcours1 = nil;
			self.LibelleParcours2 = nil;
			self.MedicalCodeReference = nil;
			self.MedicalEndDate = nil;
			self.MedicalProvider = nil;
			self.ModeTraitement = nil;
			self.NationalAgreementType = nil;
			self.NationalRefundAmount = nil;
			self.NationalRefundBasis = nil;
			self.NationalRefundRate = nil;
			self.NatureAssurance = nil;
			self.Patient = nil; // [[CSCPerson alloc] init];
			self.Payer = nil;
			self.PrescribingDoctor = nil;
			self.PrescriptionDate = nil;
			self.QualificationDepense1 = nil;
			self.QualificationDepense2 = nil;
			self.ReferenceAmount = nil;
			self.SharedAmount = nil;
			self.Specialty = nil;
			self.TarifAutorite = nil;
			self.TarifConvention = nil;
			self.TarifTiers = nil;
			self.TransferCode = nil;
			self.TypePrestation = nil;
			self.UncoveredExpense = nil;
			self.UnitCost = nil;

		}
		return self;
	}

	+ (CSCHealthItem*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCHealthItem*)[[CSCHealthItem alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.EffectiveExpenses = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"EffectiveExpenses"]];
			self.Factor = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Factor"]];
			self.MedicalCode = [Soap getNodeValue: node withName: @"MedicalCode"];
			self.MedicalCodeDetail = [Soap getNodeValue: node withName: @"MedicalCodeDetail"];
			self.MedicalCodeLabel = [Soap getNodeValue: node withName: @"MedicalCodeLabel"];
			self.MedicalStartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"MedicalStartDate"]];
			self.Units = [[Soap getNodeValue: node withName: @"Units"] intValue];
			self.AllocationList = [[CSCArrayOfHealthAllocation createWithNode: [Soap getNode: node withName: @"AllocationList"]] object];
			self.Amount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Amount"]];
			self.CodeModificateur1 = [Soap getNodeValue: node withName: @"CodeModificateur1"];
			self.CodeModificateur2 = [Soap getNodeValue: node withName: @"CodeModificateur2"];
			self.CodeModificateur3 = [Soap getNodeValue: node withName: @"CodeModificateur3"];
			self.CodeModificateur4 = [Soap getNodeValue: node withName: @"CodeModificateur4"];
			self.CodeParcours1 = [Soap getNodeValue: node withName: @"CodeParcours1"];
			self.CodeParcours2 = [Soap getNodeValue: node withName: @"CodeParcours2"];
			self.CodePrescription = [Soap getNodeValue: node withName: @"CodePrescription"];
			self.CodeRegroupement = [Soap getNodeValue: node withName: @"CodeRegroupement"];
			self.CodeTicketModerateur = [Soap getNodeValue: node withName: @"CodeTicketModerateur"];
			self.DisciplineMedicoTarifaire = [Soap getNodeValue: node withName: @"DisciplineMedicoTarifaire"];
			self.DomaineCourtSejour = [Soap getNodeValue: node withName: @"DomaineCourtSejour"];
			self.Estimate = [[CSCHealthEstimate createWithNode: [Soap getNode: node withName: @"Estimate"]] object];
			self.InputExpenses = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"InputExpenses"]];
			self.Invoice = [[CSCHealthInvoice createWithNode: [Soap getNode: node withName: @"Invoice"]] object];
			self.LiabilityRequest = [[CSCLiabilityRequest createWithNode: [Soap getNode: node withName: @"LiabilityRequest"]] object];
			self.LibelleParcours1 = [Soap getNodeValue: node withName: @"LibelleParcours1"];
			self.LibelleParcours2 = [Soap getNodeValue: node withName: @"LibelleParcours2"];
			self.MedicalCodeReference = [Soap getNodeValue: node withName: @"MedicalCodeReference"];
			self.MedicalEndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"MedicalEndDate"]];
			self.MedicalProvider = [Soap getNodeValue: node withName: @"MedicalProvider"];
			self.ModeTraitement = [Soap getNodeValue: node withName: @"ModeTraitement"];
			self.NationalAgreementType = [Soap getNodeValue: node withName: @"NationalAgreementType"];
			self.NationalRefundAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"NationalRefundAmount"]];
			self.NationalRefundBasis = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"NationalRefundBasis"]];
			self.NationalRefundRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"NationalRefundRate"]];
			self.NatureAssurance = [Soap getNodeValue: node withName: @"NatureAssurance"];
			self.No = [[Soap getNodeValue: node withName: @"No"] intValue];
			self.OptionCoordination = [[Soap getNodeValue: node withName: @"OptionCoordination"] boolValue];
			self.Patient = [[CSCPerson createWithNode: [Soap getNode: node withName: @"Patient"]] object];
			self.PatientRank = [[Soap getNodeValue: node withName: @"PatientRank"] intValue];
			self.Payer = [Soap getNodeValue: node withName: @"Payer"];
			self.PrescribingDoctor = [Soap getNodeValue: node withName: @"PrescribingDoctor"];
			self.PrescriptionDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"PrescriptionDate"]];
			self.Prevention = [[Soap getNodeValue: node withName: @"Prevention"] boolValue];
			self.QualificationDepense1 = [Soap getNodeValue: node withName: @"QualificationDepense1"];
			self.QualificationDepense2 = [Soap getNodeValue: node withName: @"QualificationDepense2"];
			self.ReferenceAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"ReferenceAmount"]];
			self.SharedAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"SharedAmount"]];
			self.Specialty = [Soap getNodeValue: node withName: @"Specialty"];
			self.TarifAutorite = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TarifAutorite"]];
			self.TarifConvention = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TarifConvention"]];
			self.TarifTiers = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"TarifTiers"]];
			self.TransferCode = [Soap getNodeValue: node withName: @"TransferCode"];
			self.TypePrestation = [Soap getNodeValue: node withName: @"TypePrestation"];
			self.UncoveredExpense = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"UncoveredExpense"]];
			self.UnitCost = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"UnitCost"]];
			self.ZoneTarif = [[Soap getNodeValue: node withName: @"ZoneTarif"] intValue];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"HealthItem"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.EffectiveExpenses != nil) [s appendFormat: @"<EffectiveExpenses>%@</EffectiveExpenses>", [NSString stringWithFormat: @"%@", self.EffectiveExpenses]];
		if (self.Factor != nil) [s appendFormat: @"<Factor>%@</Factor>", [NSString stringWithFormat: @"%@", self.Factor]];
		if (self.MedicalCode != nil) [s appendFormat: @"<MedicalCode>%@</MedicalCode>", [[self.MedicalCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MedicalCodeDetail != nil) [s appendFormat: @"<MedicalCodeDetail>%@</MedicalCodeDetail>", [[self.MedicalCodeDetail stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MedicalCodeLabel != nil) [s appendFormat: @"<MedicalCodeLabel>%@</MedicalCodeLabel>", [[self.MedicalCodeLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MedicalStartDate != nil) [s appendFormat: @"<MedicalStartDate>%@</MedicalStartDate>", [Soap getDateString: self.MedicalStartDate]];
		[s appendFormat: @"<Units>%@</Units>", [NSString stringWithFormat: @"%i", self.Units]];
		if (self.AllocationList != nil && self.AllocationList.count > 0) {
			[s appendFormat: @"<AllocationList>%@</AllocationList>", [CSCArrayOfHealthAllocation serialize: self.AllocationList]];
		} else {
			[s appendString: @"<AllocationList/>"];
		}
		if (self.Amount != nil) [s appendFormat: @"<Amount>%@</Amount>", [NSString stringWithFormat: @"%@", self.Amount]];
		if (self.CodeModificateur1 != nil) [s appendFormat: @"<CodeModificateur1>%@</CodeModificateur1>", [[self.CodeModificateur1 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeModificateur2 != nil) [s appendFormat: @"<CodeModificateur2>%@</CodeModificateur2>", [[self.CodeModificateur2 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeModificateur3 != nil) [s appendFormat: @"<CodeModificateur3>%@</CodeModificateur3>", [[self.CodeModificateur3 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeModificateur4 != nil) [s appendFormat: @"<CodeModificateur4>%@</CodeModificateur4>", [[self.CodeModificateur4 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeParcours1 != nil) [s appendFormat: @"<CodeParcours1>%@</CodeParcours1>", [[self.CodeParcours1 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeParcours2 != nil) [s appendFormat: @"<CodeParcours2>%@</CodeParcours2>", [[self.CodeParcours2 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodePrescription != nil) [s appendFormat: @"<CodePrescription>%@</CodePrescription>", [[self.CodePrescription stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeRegroupement != nil) [s appendFormat: @"<CodeRegroupement>%@</CodeRegroupement>", [[self.CodeRegroupement stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CodeTicketModerateur != nil) [s appendFormat: @"<CodeTicketModerateur>%@</CodeTicketModerateur>", [[self.CodeTicketModerateur stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DisciplineMedicoTarifaire != nil) [s appendFormat: @"<DisciplineMedicoTarifaire>%@</DisciplineMedicoTarifaire>", [[self.DisciplineMedicoTarifaire stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DomaineCourtSejour != nil) [s appendFormat: @"<DomaineCourtSejour>%@</DomaineCourtSejour>", [[self.DomaineCourtSejour stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Estimate != nil) [s appendString: [self.Estimate serialize: @"Estimate"]];
		if (self.InputExpenses != nil) [s appendFormat: @"<InputExpenses>%@</InputExpenses>", [NSString stringWithFormat: @"%@", self.InputExpenses]];
		if (self.Invoice != nil) [s appendString: [self.Invoice serialize: @"Invoice"]];
		if (self.LiabilityRequest != nil) [s appendString: [self.LiabilityRequest serialize: @"LiabilityRequest"]];
		if (self.LibelleParcours1 != nil) [s appendFormat: @"<LibelleParcours1>%@</LibelleParcours1>", [[self.LibelleParcours1 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.LibelleParcours2 != nil) [s appendFormat: @"<LibelleParcours2>%@</LibelleParcours2>", [[self.LibelleParcours2 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MedicalCodeReference != nil) [s appendFormat: @"<MedicalCodeReference>%@</MedicalCodeReference>", [[self.MedicalCodeReference stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MedicalEndDate != nil) [s appendFormat: @"<MedicalEndDate>%@</MedicalEndDate>", [Soap getDateString: self.MedicalEndDate]];
		if (self.MedicalProvider != nil) [s appendFormat: @"<MedicalProvider>%@</MedicalProvider>", [[self.MedicalProvider stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ModeTraitement != nil) [s appendFormat: @"<ModeTraitement>%@</ModeTraitement>", [[self.ModeTraitement stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.NationalAgreementType != nil) [s appendFormat: @"<NationalAgreementType>%@</NationalAgreementType>", [[self.NationalAgreementType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.NationalRefundAmount != nil) [s appendFormat: @"<NationalRefundAmount>%@</NationalRefundAmount>", [NSString stringWithFormat: @"%@", self.NationalRefundAmount]];
		if (self.NationalRefundBasis != nil) [s appendFormat: @"<NationalRefundBasis>%@</NationalRefundBasis>", [NSString stringWithFormat: @"%@", self.NationalRefundBasis]];
		if (self.NationalRefundRate != nil) [s appendFormat: @"<NationalRefundRate>%@</NationalRefundRate>", [NSString stringWithFormat: @"%@", self.NationalRefundRate]];
		if (self.NatureAssurance != nil) [s appendFormat: @"<NatureAssurance>%@</NatureAssurance>", [[self.NatureAssurance stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<No>%@</No>", [NSString stringWithFormat: @"%i", self.No]];
		[s appendFormat: @"<OptionCoordination>%@</OptionCoordination>", (self.OptionCoordination)?@"true":@"false"];
		if (self.Patient != nil) [s appendString: [self.Patient serialize: @"Patient"]];
		[s appendFormat: @"<PatientRank>%@</PatientRank>", [NSString stringWithFormat: @"%i", self.PatientRank]];
		if (self.Payer != nil) [s appendFormat: @"<Payer>%@</Payer>", [[self.Payer stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PrescribingDoctor != nil) [s appendFormat: @"<PrescribingDoctor>%@</PrescribingDoctor>", [[self.PrescribingDoctor stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PrescriptionDate != nil) [s appendFormat: @"<PrescriptionDate>%@</PrescriptionDate>", [Soap getDateString: self.PrescriptionDate]];
		[s appendFormat: @"<Prevention>%@</Prevention>", (self.Prevention)?@"true":@"false"];
		if (self.QualificationDepense1 != nil) [s appendFormat: @"<QualificationDepense1>%@</QualificationDepense1>", [[self.QualificationDepense1 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.QualificationDepense2 != nil) [s appendFormat: @"<QualificationDepense2>%@</QualificationDepense2>", [[self.QualificationDepense2 stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ReferenceAmount != nil) [s appendFormat: @"<ReferenceAmount>%@</ReferenceAmount>", [NSString stringWithFormat: @"%@", self.ReferenceAmount]];
		if (self.SharedAmount != nil) [s appendFormat: @"<SharedAmount>%@</SharedAmount>", [NSString stringWithFormat: @"%@", self.SharedAmount]];
		if (self.Specialty != nil) [s appendFormat: @"<Specialty>%@</Specialty>", [[self.Specialty stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TarifAutorite != nil) [s appendFormat: @"<TarifAutorite>%@</TarifAutorite>", [NSString stringWithFormat: @"%@", self.TarifAutorite]];
		if (self.TarifConvention != nil) [s appendFormat: @"<TarifConvention>%@</TarifConvention>", [NSString stringWithFormat: @"%@", self.TarifConvention]];
		if (self.TarifTiers != nil) [s appendFormat: @"<TarifTiers>%@</TarifTiers>", [NSString stringWithFormat: @"%@", self.TarifTiers]];
		if (self.TransferCode != nil) [s appendFormat: @"<TransferCode>%@</TransferCode>", [[self.TransferCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.TypePrestation != nil) [s appendFormat: @"<TypePrestation>%@</TypePrestation>", [[self.TypePrestation stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.UncoveredExpense != nil) [s appendFormat: @"<UncoveredExpense>%@</UncoveredExpense>", [NSString stringWithFormat: @"%@", self.UncoveredExpense]];
		if (self.UnitCost != nil) [s appendFormat: @"<UnitCost>%@</UnitCost>", [NSString stringWithFormat: @"%@", self.UnitCost]];
		[s appendFormat: @"<ZoneTarif>%@</ZoneTarif>", [NSString stringWithFormat: @"%i", self.ZoneTarif]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCHealthItem class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
