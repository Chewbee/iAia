/*
	CSCDisbursementSplit.h
	The implementation of properties and methods for the CSCDisbursementSplit object.
	Generated by SudzC.com
*/
#import "CSCDisbursementSplit.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCBankAccount.h"
#import "CSCPostalAddress.h"
#import "CSCArrayOfPartyRole.h"
@implementation CSCDisbursementSplit
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize BankAccount = _BankAccount;
	@synthesize PaymentType = _PaymentType;
	@synthesize PaymentTypeLabel = _PaymentTypeLabel;
	@synthesize PostalAddress = _PostalAddress;
	@synthesize QuotaShare = _QuotaShare;
	@synthesize RoleList = _RoleList;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.BankAccount = nil; // [[CSCBankAccount alloc] init];
			self.PaymentType = nil;
			self.PaymentTypeLabel = nil;
			self.PostalAddress = nil; // [[CSCPostalAddress alloc] init];
			self.QuotaShare = nil;
			self.RoleList = [[NSMutableArray alloc] init];

		}
		return self;
	}

	+ (CSCDisbursementSplit*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCDisbursementSplit*)[[CSCDisbursementSplit alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.BankAccount = [[CSCBankAccount createWithNode: [Soap getNode: node withName: @"BankAccount"]] object];
			self.PaymentType = [Soap getNodeValue: node withName: @"PaymentType"];
			self.PaymentTypeLabel = [Soap getNodeValue: node withName: @"PaymentTypeLabel"];
			self.PostalAddress = [[CSCPostalAddress createWithNode: [Soap getNode: node withName: @"PostalAddress"]] object];
			self.QuotaShare = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"QuotaShare"]];
			self.RoleList = [[CSCArrayOfPartyRole createWithNode: [Soap getNode: node withName: @"RoleList"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"DisbursementSplit"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.BankAccount != nil) [s appendString: [self.BankAccount serialize: @"BankAccount"]];
		if (self.PaymentType != nil) [s appendFormat: @"<PaymentType>%@</PaymentType>", [[self.PaymentType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PaymentTypeLabel != nil) [s appendFormat: @"<PaymentTypeLabel>%@</PaymentTypeLabel>", [[self.PaymentTypeLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PostalAddress != nil) [s appendString: [self.PostalAddress serialize: @"PostalAddress"]];
		if (self.QuotaShare != nil) [s appendFormat: @"<QuotaShare>%@</QuotaShare>", [NSString stringWithFormat: @"%@", self.QuotaShare]];
		if (self.RoleList != nil && self.RoleList.count > 0) {
			[s appendFormat: @"<RoleList>%@</RoleList>", [CSCArrayOfPartyRole serialize: self.RoleList]];
		} else {
			[s appendString: @"<RoleList/>"];
		}

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCDisbursementSplit class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
