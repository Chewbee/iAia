/*
	CSCLaunderingControl.h
	The implementation of properties and methods for the CSCLaunderingControl object.
	Generated by SudzC.com
*/
#import "CSCLaunderingControl.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
@implementation CSCLaunderingControl
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize Amount = _Amount;
	@synthesize ContactDate = _ContactDate;
	@synthesize EventType = _EventType;
	@synthesize FinancialCapacity = _FinancialCapacity;
	@synthesize FundsSource = _FundsSource;
	@synthesize IsAccountHolder = _IsAccountHolder;
	@synthesize ProfessionCode = _ProfessionCode;
	@synthesize Relationship = _Relationship;
	@synthesize Remark = _Remark;

	- (id) init
	{
		if(self = [super init])
		{
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.Amount = nil;
			self.ContactDate = nil;
			self.EventType = nil;
			self.FundsSource = nil;
			self.ProfessionCode = nil;
			self.Relationship = nil;
			self.Remark = nil;

		}
		return self;
	}

	+ (CSCLaunderingControl*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCLaunderingControl*)[[CSCLaunderingControl alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.Amount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Amount"]];
			self.ContactDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"ContactDate"]];
			self.EventType = [Soap getNodeValue: node withName: @"EventType"];
			self.FinancialCapacity = [[Soap getNodeValue: node withName: @"FinancialCapacity"] boolValue];
			self.FundsSource = [Soap getNodeValue: node withName: @"FundsSource"];
			self.IsAccountHolder = [[Soap getNodeValue: node withName: @"IsAccountHolder"] boolValue];
			self.ProfessionCode = [Soap getNodeValue: node withName: @"ProfessionCode"];
			self.Relationship = [Soap getNodeValue: node withName: @"Relationship"];
			self.Remark = [Soap getNodeValue: node withName: @"Remark"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"LaunderingControl"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.Amount != nil) [s appendFormat: @"<Amount>%@</Amount>", [NSString stringWithFormat: @"%@", self.Amount]];
		if (self.ContactDate != nil) [s appendFormat: @"<ContactDate>%@</ContactDate>", [Soap getDateString: self.ContactDate]];
		if (self.EventType != nil) [s appendFormat: @"<EventType>%@</EventType>", [[self.EventType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<FinancialCapacity>%@</FinancialCapacity>", (self.FinancialCapacity)?@"true":@"false"];
		if (self.FundsSource != nil) [s appendFormat: @"<FundsSource>%@</FundsSource>", [[self.FundsSource stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<IsAccountHolder>%@</IsAccountHolder>", (self.IsAccountHolder)?@"true":@"false"];
		if (self.ProfessionCode != nil) [s appendFormat: @"<ProfessionCode>%@</ProfessionCode>", [[self.ProfessionCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Relationship != nil) [s appendFormat: @"<Relationship>%@</Relationship>", [[self.Relationship stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Remark != nil) [s appendFormat: @"<Remark>%@</Remark>", [[self.Remark stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCLaunderingControl class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
