/*
	CSCMedicalReport.h
	The implementation of properties and methods for the CSCMedicalReport object.
	Generated by SudzC.com
*/
#import "CSCMedicalReport.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
@implementation CSCMedicalReport
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize Date = _Date;
	@synthesize DisabilityMaximumRate = _DisabilityMaximumRate;
	@synthesize DisabilityMinimumRate = _DisabilityMinimumRate;
	@synthesize DisabilityRate = _DisabilityRate;
	@synthesize EstheticDamageRate = _EstheticDamageRate;
	@synthesize MedicalAdviser = _MedicalAdviser;
	@synthesize NextRenewal = _NextRenewal;
	@synthesize RequestDate = _RequestDate;
	@synthesize Status = _Status;
	@synthesize SustainedPainRate = _SustainedPainRate;
	@synthesize Type = _Type;
	@synthesize WaitingPeriodDate = _WaitingPeriodDate;

	- (id) init
	{
		if(self = [super init])
		{
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.Date = nil;
			self.DisabilityMaximumRate = nil;
			self.DisabilityMinimumRate = nil;
			self.DisabilityRate = nil;
			self.EstheticDamageRate = nil;
			self.RequestDate = nil;
			self.Status = nil;
			self.SustainedPainRate = nil;
			self.Type = nil;
			self.WaitingPeriodDate = nil;

		}
		return self;
	}

	+ (CSCMedicalReport*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCMedicalReport*)[[CSCMedicalReport alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.Date = [Soap dateFromString: [Soap getNodeValue: node withName: @"Date"]];
			self.DisabilityMaximumRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"DisabilityMaximumRate"]];
			self.DisabilityMinimumRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"DisabilityMinimumRate"]];
			self.DisabilityRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"DisabilityRate"]];
			self.EstheticDamageRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"EstheticDamageRate"]];
			self.MedicalAdviser = [[Soap getNodeValue: node withName: @"MedicalAdviser"] boolValue];
			self.NextRenewal = [[Soap getNodeValue: node withName: @"NextRenewal"] intValue];
			self.RequestDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"RequestDate"]];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.SustainedPainRate = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"SustainedPainRate"]];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
			self.WaitingPeriodDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"WaitingPeriodDate"]];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"MedicalReport"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.Date != nil) [s appendFormat: @"<Date>%@</Date>", [Soap getDateString: self.Date]];
		if (self.DisabilityMaximumRate != nil) [s appendFormat: @"<DisabilityMaximumRate>%@</DisabilityMaximumRate>", [NSString stringWithFormat: @"%@", self.DisabilityMaximumRate]];
		if (self.DisabilityMinimumRate != nil) [s appendFormat: @"<DisabilityMinimumRate>%@</DisabilityMinimumRate>", [NSString stringWithFormat: @"%@", self.DisabilityMinimumRate]];
		if (self.DisabilityRate != nil) [s appendFormat: @"<DisabilityRate>%@</DisabilityRate>", [NSString stringWithFormat: @"%@", self.DisabilityRate]];
		if (self.EstheticDamageRate != nil) [s appendFormat: @"<EstheticDamageRate>%@</EstheticDamageRate>", [NSString stringWithFormat: @"%@", self.EstheticDamageRate]];
		[s appendFormat: @"<MedicalAdviser>%@</MedicalAdviser>", (self.MedicalAdviser)?@"true":@"false"];
		[s appendFormat: @"<NextRenewal>%@</NextRenewal>", [NSString stringWithFormat: @"%i", self.NextRenewal]];
		if (self.RequestDate != nil) [s appendFormat: @"<RequestDate>%@</RequestDate>", [Soap getDateString: self.RequestDate]];
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.SustainedPainRate != nil) [s appendFormat: @"<SustainedPainRate>%@</SustainedPainRate>", [NSString stringWithFormat: @"%@", self.SustainedPainRate]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.WaitingPeriodDate != nil) [s appendFormat: @"<WaitingPeriodDate>%@</WaitingPeriodDate>", [Soap getDateString: self.WaitingPeriodDate]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCMedicalReport class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
