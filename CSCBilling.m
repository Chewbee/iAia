/*
	CSCBilling.h
	The implementation of properties and methods for the CSCBilling object.
	Generated by SudzC.com
*/
#import "CSCBilling.h"

#import "CSCObject.h"
#import "CSCArrayOfExtensionElement.h"
#import "CSCBankAccount.h"
#import "CSCContract.h"
#import "CSCCreditCard.h"
#import "CSCArrayOfString.h"
#import "CSCDirectDebitMandate.h"
#import "CSCEmployeeGroup.h"
#import "CSCArrayOfFeesOverride.h"
#import "CSCArrayOfString.h"
#import "CSCArrayOfString.h"
#import "CSCArrayOfFundsAllocation.h"
#import "CSCIndexation.h"
#import "CSCPayPoint.h"
#import "CSCPartyRole.h"
#import "CSCArrayOfPartyRole.h"
@implementation CSCBilling
	@synthesize DisplayId = _DisplayId;
	@synthesize EffectiveDate = _EffectiveDate;
	@synthesize EndDate = _EndDate;
	@synthesize Extension = _Extension;
	@synthesize ExtensionList = _ExtensionList;
	@synthesize StartDate = _StartDate;
	@synthesize Amount = _Amount;
	@synthesize BankAccount = _BankAccount;
	@synthesize BillReceiver = _BillReceiver;
	@synthesize BillReceiverLabel = _BillReceiverLabel;
	@synthesize Contract = _Contract;
	@synthesize CreditCard = _CreditCard;
	@synthesize CurrencyCode = _CurrencyCode;
	@synthesize DirectDebitDay = _DirectDebitDay;
	@synthesize DirectDebitDayList = _DirectDebitDayList;
	@synthesize DirectDebitMandate = _DirectDebitMandate;
	@synthesize DirectDebitStatus = _DirectDebitStatus;
	@synthesize DueDateType = _DueDateType;
	@synthesize DueDateTypeLabel = _DueDateTypeLabel;
	@synthesize EmployeeGroup = _EmployeeGroup;
	@synthesize FeesOverrideList = _FeesOverrideList;
	@synthesize Frequency = _Frequency;
	@synthesize FrequencyFees = _FrequencyFees;
	@synthesize FrequencyLabel = _FrequencyLabel;
	@synthesize FrequencyLabelList = _FrequencyLabelList;
	@synthesize FrequencyList = _FrequencyList;
	@synthesize FrequencyType = _FrequencyType;
	@synthesize FundsAllocationList = _FundsAllocationList;
	@synthesize Indexation = _Indexation;
	@synthesize IndexationEnabled = _IndexationEnabled;
	@synthesize InitialPremiumAmount = _InitialPremiumAmount;
	@synthesize InitialPremiumNumber = _InitialPremiumNumber;
	@synthesize MainDueDay = _MainDueDay;
	@synthesize MainDueMonth = _MainDueMonth;
	@synthesize MarketingCode = _MarketingCode;
	@synthesize NextDueDate = _NextDueDate;
	@synthesize PayPoint = _PayPoint;
	@synthesize Payer = _Payer;
	@synthesize PaymentSource = _PaymentSource;
	@synthesize PaymentType = _PaymentType;
	@synthesize PaymentTypeLabel = _PaymentTypeLabel;
	@synthesize RestartDate = _RestartDate;
	@synthesize RoleList = _RoleList;
	@synthesize SignatureDate = _SignatureDate;
	@synthesize Status = _Status;
	@synthesize StopDate = _StopDate;
	@synthesize StopMotive = _StopMotive;
	@synthesize TaxIncludedAmount = _TaxIncludedAmount;
	@synthesize TaxRule = _TaxRule;
	@synthesize Threshold = _Threshold;
	@synthesize Type = _Type;

	- (id) init
	{
		if(self = [super init])
		{
			self.DisplayId = nil;
			self.EffectiveDate = nil;
			self.EndDate = nil;
			self.Extension = nil; // [[CSCObject alloc] init];
			self.ExtensionList = [[NSMutableArray alloc] init];
			self.StartDate = nil;
			self.Amount = nil;
			self.BankAccount = nil; // [[CSCBankAccount alloc] init];
			self.BillReceiver = nil;
			self.BillReceiverLabel = nil;
			self.Contract = nil; // [[CSCContract alloc] init];
			self.CreditCard = nil; // [[CSCCreditCard alloc] init];
			self.CurrencyCode = nil;
			self.DirectDebitDay = nil;
			self.DirectDebitDayList = [[NSMutableArray alloc] init];
			self.DirectDebitMandate = nil; // [[CSCDirectDebitMandate alloc] init];
			self.DirectDebitStatus = nil;
			self.DueDateType = nil;
			self.DueDateTypeLabel = nil;
			self.EmployeeGroup = nil; // [[CSCEmployeeGroup alloc] init];
			self.FeesOverrideList = [[NSMutableArray alloc] init];
			self.Frequency = nil;
			self.FrequencyFees = nil;
			self.FrequencyLabel = nil;
			self.FrequencyLabelList = [[NSMutableArray alloc] init];
			self.FrequencyList = [[NSMutableArray alloc] init];
			self.FrequencyType = nil;
			self.FundsAllocationList = [[NSMutableArray alloc] init];
			self.Indexation = nil; // [[CSCIndexation alloc] init];
			self.InitialPremiumAmount = nil;
			self.MarketingCode = nil;
			self.NextDueDate = nil;
			self.PayPoint = nil; // [[CSCPayPoint alloc] init];
			self.Payer = nil; // [[CSCPartyRole alloc] init];
			self.PaymentSource = nil;
			self.PaymentType = nil;
			self.PaymentTypeLabel = nil;
			self.RestartDate = nil;
			self.RoleList = [[NSMutableArray alloc] init];
			self.SignatureDate = nil;
			self.Status = nil;
			self.StopDate = nil;
			self.StopMotive = nil;
			self.TaxRule = nil;
			self.Threshold = nil;
			self.Type = nil;

		}
		return self;
	}

	+ (CSCBilling*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (CSCBilling*)[[CSCBilling alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.DisplayId = [Soap getNodeValue: node withName: @"DisplayId"];
			self.EffectiveDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EffectiveDate"]];
			self.EndDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"EndDate"]];
			self.Extension = [[CSCObject createWithNode: [Soap getNode: node withName: @"Extension"]] object];
			self.ExtensionList = [[CSCArrayOfExtensionElement createWithNode: [Soap getNode: node withName: @"ExtensionList"]] object];
			self.StartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StartDate"]];
			self.Amount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Amount"]];
			self.BankAccount = [[CSCBankAccount createWithNode: [Soap getNode: node withName: @"BankAccount"]] object];
			self.BillReceiver = [Soap getNodeValue: node withName: @"BillReceiver"];
			self.BillReceiverLabel = [Soap getNodeValue: node withName: @"BillReceiverLabel"];
			self.Contract = [[CSCContract createWithNode: [Soap getNode: node withName: @"Contract"]] object];
			self.CreditCard = [[CSCCreditCard createWithNode: [Soap getNode: node withName: @"CreditCard"]] object];
			self.CurrencyCode = [Soap getNodeValue: node withName: @"CurrencyCode"];
			self.DirectDebitDay = [Soap getNodeValue: node withName: @"DirectDebitDay"];
			self.DirectDebitDayList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"DirectDebitDayList"]] object];
			self.DirectDebitMandate = [[CSCDirectDebitMandate createWithNode: [Soap getNode: node withName: @"DirectDebitMandate"]] object];
			self.DirectDebitStatus = [Soap getNodeValue: node withName: @"DirectDebitStatus"];
			self.DueDateType = [Soap getNodeValue: node withName: @"DueDateType"];
			self.DueDateTypeLabel = [Soap getNodeValue: node withName: @"DueDateTypeLabel"];
			self.EmployeeGroup = [[CSCEmployeeGroup createWithNode: [Soap getNode: node withName: @"EmployeeGroup"]] object];
			self.FeesOverrideList = [[CSCArrayOfFeesOverride createWithNode: [Soap getNode: node withName: @"FeesOverrideList"]] object];
			self.Frequency = [Soap getNodeValue: node withName: @"Frequency"];
			self.FrequencyFees = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"FrequencyFees"]];
			self.FrequencyLabel = [Soap getNodeValue: node withName: @"FrequencyLabel"];
			self.FrequencyLabelList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"FrequencyLabelList"]] object];
			self.FrequencyList = [[CSCArrayOfString createWithNode: [Soap getNode: node withName: @"FrequencyList"]] object];
			self.FrequencyType = [Soap getNodeValue: node withName: @"FrequencyType"];
			self.FundsAllocationList = [[CSCArrayOfFundsAllocation createWithNode: [Soap getNode: node withName: @"FundsAllocationList"]] object];
			self.Indexation = [[CSCIndexation createWithNode: [Soap getNode: node withName: @"Indexation"]] object];
			self.IndexationEnabled = [[Soap getNodeValue: node withName: @"IndexationEnabled"] boolValue];
			self.InitialPremiumAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"InitialPremiumAmount"]];
			self.InitialPremiumNumber = [[Soap getNodeValue: node withName: @"InitialPremiumNumber"] intValue];
			self.MainDueDay = [[Soap getNodeValue: node withName: @"MainDueDay"] intValue];
			self.MainDueMonth = [[Soap getNodeValue: node withName: @"MainDueMonth"] intValue];
			self.MarketingCode = [Soap getNodeValue: node withName: @"MarketingCode"];
			self.NextDueDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"NextDueDate"]];
			self.PayPoint = [[CSCPayPoint createWithNode: [Soap getNode: node withName: @"PayPoint"]] object];
			self.Payer = [[CSCPartyRole createWithNode: [Soap getNode: node withName: @"Payer"]] object];
			self.PaymentSource = [Soap getNodeValue: node withName: @"PaymentSource"];
			self.PaymentType = [Soap getNodeValue: node withName: @"PaymentType"];
			self.PaymentTypeLabel = [Soap getNodeValue: node withName: @"PaymentTypeLabel"];
			self.RestartDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"RestartDate"]];
			self.RoleList = [[CSCArrayOfPartyRole createWithNode: [Soap getNode: node withName: @"RoleList"]] object];
			self.SignatureDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"SignatureDate"]];
			self.Status = [Soap getNodeValue: node withName: @"Status"];
			self.StopDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StopDate"]];
			self.StopMotive = [Soap getNodeValue: node withName: @"StopMotive"];
			self.TaxIncludedAmount = [[Soap getNodeValue: node withName: @"TaxIncludedAmount"] boolValue];
			self.TaxRule = [Soap getNodeValue: node withName: @"TaxRule"];
			self.Threshold = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Threshold"]];
			self.Type = [Soap getNodeValue: node withName: @"Type"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"Billing"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.DisplayId != nil) [s appendFormat: @"<DisplayId>%@</DisplayId>", [[self.DisplayId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EffectiveDate != nil) [s appendFormat: @"<EffectiveDate>%@</EffectiveDate>", [Soap getDateString: self.EffectiveDate]];
		if (self.EndDate != nil) [s appendFormat: @"<EndDate>%@</EndDate>", [Soap getDateString: self.EndDate]];
		if (self.Extension != nil) [s appendString: [self.Extension serialize: @"Extension"]];
		if (self.ExtensionList != nil && self.ExtensionList.count > 0) {
			[s appendFormat: @"<ExtensionList>%@</ExtensionList>", [CSCArrayOfExtensionElement serialize: self.ExtensionList]];
		} else {
			[s appendString: @"<ExtensionList/>"];
		}
		if (self.StartDate != nil) [s appendFormat: @"<StartDate>%@</StartDate>", [Soap getDateString: self.StartDate]];
		if (self.Amount != nil) [s appendFormat: @"<Amount>%@</Amount>", [NSString stringWithFormat: @"%@", self.Amount]];
		if (self.BankAccount != nil) [s appendString: [self.BankAccount serialize: @"BankAccount"]];
		if (self.BillReceiver != nil) [s appendFormat: @"<BillReceiver>%@</BillReceiver>", [[self.BillReceiver stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BillReceiverLabel != nil) [s appendFormat: @"<BillReceiverLabel>%@</BillReceiverLabel>", [[self.BillReceiverLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Contract != nil) [s appendString: [self.Contract serialize: @"Contract"]];
		if (self.CreditCard != nil) [s appendString: [self.CreditCard serialize: @"CreditCard"]];
		if (self.CurrencyCode != nil) [s appendFormat: @"<CurrencyCode>%@</CurrencyCode>", [[self.CurrencyCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DirectDebitDay != nil) [s appendFormat: @"<DirectDebitDay>%@</DirectDebitDay>", [[self.DirectDebitDay stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DirectDebitDayList != nil && self.DirectDebitDayList.count > 0) {
			[s appendFormat: @"<DirectDebitDayList>%@</DirectDebitDayList>", [CSCArrayOfString serialize: self.DirectDebitDayList]];
		} else {
			[s appendString: @"<DirectDebitDayList/>"];
		}
		if (self.DirectDebitMandate != nil) [s appendString: [self.DirectDebitMandate serialize: @"DirectDebitMandate"]];
		if (self.DirectDebitStatus != nil) [s appendFormat: @"<DirectDebitStatus>%@</DirectDebitStatus>", [[self.DirectDebitStatus stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DueDateType != nil) [s appendFormat: @"<DueDateType>%@</DueDateType>", [[self.DueDateType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DueDateTypeLabel != nil) [s appendFormat: @"<DueDateTypeLabel>%@</DueDateTypeLabel>", [[self.DueDateTypeLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EmployeeGroup != nil) [s appendString: [self.EmployeeGroup serialize: @"EmployeeGroup"]];
		if (self.FeesOverrideList != nil && self.FeesOverrideList.count > 0) {
			[s appendFormat: @"<FeesOverrideList>%@</FeesOverrideList>", [CSCArrayOfFeesOverride serialize: self.FeesOverrideList]];
		} else {
			[s appendString: @"<FeesOverrideList/>"];
		}
		if (self.Frequency != nil) [s appendFormat: @"<Frequency>%@</Frequency>", [[self.Frequency stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.FrequencyFees != nil) [s appendFormat: @"<FrequencyFees>%@</FrequencyFees>", [NSString stringWithFormat: @"%@", self.FrequencyFees]];
		if (self.FrequencyLabel != nil) [s appendFormat: @"<FrequencyLabel>%@</FrequencyLabel>", [[self.FrequencyLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.FrequencyLabelList != nil && self.FrequencyLabelList.count > 0) {
			[s appendFormat: @"<FrequencyLabelList>%@</FrequencyLabelList>", [CSCArrayOfString serialize: self.FrequencyLabelList]];
		} else {
			[s appendString: @"<FrequencyLabelList/>"];
		}
		if (self.FrequencyList != nil && self.FrequencyList.count > 0) {
			[s appendFormat: @"<FrequencyList>%@</FrequencyList>", [CSCArrayOfString serialize: self.FrequencyList]];
		} else {
			[s appendString: @"<FrequencyList/>"];
		}
		if (self.FrequencyType != nil) [s appendFormat: @"<FrequencyType>%@</FrequencyType>", [[self.FrequencyType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.FundsAllocationList != nil && self.FundsAllocationList.count > 0) {
			[s appendFormat: @"<FundsAllocationList>%@</FundsAllocationList>", [CSCArrayOfFundsAllocation serialize: self.FundsAllocationList]];
		} else {
			[s appendString: @"<FundsAllocationList/>"];
		}
		if (self.Indexation != nil) [s appendString: [self.Indexation serialize: @"Indexation"]];
		[s appendFormat: @"<IndexationEnabled>%@</IndexationEnabled>", (self.IndexationEnabled)?@"true":@"false"];
		if (self.InitialPremiumAmount != nil) [s appendFormat: @"<InitialPremiumAmount>%@</InitialPremiumAmount>", [NSString stringWithFormat: @"%@", self.InitialPremiumAmount]];
		[s appendFormat: @"<InitialPremiumNumber>%@</InitialPremiumNumber>", [NSString stringWithFormat: @"%i", self.InitialPremiumNumber]];
		[s appendFormat: @"<MainDueDay>%@</MainDueDay>", [NSString stringWithFormat: @"%i", self.MainDueDay]];
		[s appendFormat: @"<MainDueMonth>%@</MainDueMonth>", [NSString stringWithFormat: @"%i", self.MainDueMonth]];
		if (self.MarketingCode != nil) [s appendFormat: @"<MarketingCode>%@</MarketingCode>", [[self.MarketingCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.NextDueDate != nil) [s appendFormat: @"<NextDueDate>%@</NextDueDate>", [Soap getDateString: self.NextDueDate]];
		if (self.PayPoint != nil) [s appendString: [self.PayPoint serialize: @"PayPoint"]];
		if (self.Payer != nil) [s appendString: [self.Payer serialize: @"Payer"]];
		if (self.PaymentSource != nil) [s appendFormat: @"<PaymentSource>%@</PaymentSource>", [[self.PaymentSource stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PaymentType != nil) [s appendFormat: @"<PaymentType>%@</PaymentType>", [[self.PaymentType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PaymentTypeLabel != nil) [s appendFormat: @"<PaymentTypeLabel>%@</PaymentTypeLabel>", [[self.PaymentTypeLabel stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.RestartDate != nil) [s appendFormat: @"<RestartDate>%@</RestartDate>", [Soap getDateString: self.RestartDate]];
		if (self.RoleList != nil && self.RoleList.count > 0) {
			[s appendFormat: @"<RoleList>%@</RoleList>", [CSCArrayOfPartyRole serialize: self.RoleList]];
		} else {
			[s appendString: @"<RoleList/>"];
		}
		if (self.SignatureDate != nil) [s appendFormat: @"<SignatureDate>%@</SignatureDate>", [Soap getDateString: self.SignatureDate]];
		if (self.Status != nil) [s appendFormat: @"<Status>%@</Status>", [[self.Status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.StopDate != nil) [s appendFormat: @"<StopDate>%@</StopDate>", [Soap getDateString: self.StopDate]];
		if (self.StopMotive != nil) [s appendFormat: @"<StopMotive>%@</StopMotive>", [[self.StopMotive stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<TaxIncludedAmount>%@</TaxIncludedAmount>", (self.TaxIncludedAmount)?@"true":@"false"];
		if (self.TaxRule != nil) [s appendFormat: @"<TaxRule>%@</TaxRule>", [[self.TaxRule stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Threshold != nil) [s appendFormat: @"<Threshold>%@</Threshold>", [NSString stringWithFormat: @"%@", self.Threshold]];
		if (self.Type != nil) [s appendFormat: @"<Type>%@</Type>", [[self.Type stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[CSCBilling class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
